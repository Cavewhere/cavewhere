import "qt.proto";

package CavewhereProto;

message CavingRegion {
    repeated Cave caves = 1;
    optional int32 version = 2;
}

message Cave {
    required QtProto.QString name = 1;
    repeated Trip trips = 2;
    optional Units.LengthUnit lengthUnit = 3;
    optional Units.LengthUnit depthUnit = 4;
    optional StationPositionLookup stationPositionLookup = 5;
    optional bool stationPositionLookupStale = 6;
}

message Trip {
    required QtProto.QString name = 1;
    optional QtProto.QDate date = 2;
    optional SurveyNoteModel noteModel = 3;
    optional TripCalibration tripCalibration = 4;
    repeated SurveyChunk chunks = 5;
    optional Team team = 6;
}

message Station {
    required QtProto.QString name = 1;
    optional double left = 2;
    optional double right = 3;
    optional double up = 4;
    optional double down = 5;
    optional DistanceStates.State leftState = 6;
    optional DistanceStates.State rightState = 7;
    optional DistanceStates.State upState = 8;
    optional DistanceStates.State downState = 9;
}

message SurveyNoteModel {
    repeated Note notes = 1;
}

message Note {
    optional Image image = 1;
    optional double rotation = 2;
    repeated Scrap scraps = 3;
    optional ImageResolution imageResolution = 4;
}

message Image {
    optional int32 originalId = 1;
    optional int32 iconId = 2;
    repeated int32 mipmapIds = 3;
    optional QtProto.QSize size = 4;
    optional int32 dotPerMeter = 5;
    optional QtProto.QSizeF OBSOLETE_clipArea = 6; //Not need anymore
}

message TripCalibration {
    optional bool correctedCompassBacksight = 1;
    optional bool correctedClinoBacksight = 2;
    optional double tapeCalibration = 3;
    optional double frontCompassCalibration = 4;
    optional double frontClinoCalibration = 5;
    optional double backCompasssCalibration = 6;
    optional double backClinoCalibration= 7;
    optional double declination = 8;
    optional Units.LengthUnit distanceUnit = 9;
    optional bool frontSights = 10;
    optional bool backSights = 11;
    optional bool correctedCompassFrontsight = 12;
    optional bool correctedClinoFrontsight = 13;
}

message SurveyChunk {
    repeated Station stations = 1;
    repeated Shot shots = 2;
}

message Shot {
    optional double Distance = 1;
    optional double Compass = 2;
    optional double BackCompass = 3;
    optional double Clino = 4;
    optional double BackClino = 5;
    optional DistanceStates.State distanceState = 6;
    optional CompassStates.State compassState = 7;
    optional CompassStates.State backCompassState = 8;
    optional ClinoStates.State clinoState = 9;
    optional ClinoStates.State backClinoState = 10;
    optional bool includeDistance = 11;
}

message DistanceStates {
    enum State {
        Valid = 0;
        Empty = 1;
    }
}

message CompassStates {
    enum State {
        Valid = 0;
        Empty = 1;
    }
}

message ClinoStates {
    enum State {
        Valid = 0;
        Empty = 1;
        Down = 2;
        Up = 3;
    }
}

message Scrap {
    repeated QtProto.QPointF outlinePoints = 1;
    repeated NoteStation noteStations = 2;
    optional NoteTranformation noteTransformation = 3;
    optional bool calculateNoteTransform = 4;
    optional TriangulatedData triangleData = 5;
    repeated Lead leads = 6;
}

message TriangulatedData {
    optional Image croppedImage = 1;
    repeated QtProto.QVector3D points = 2;
    repeated QtProto.QVector2D texCoords = 3;
    repeated uint32 indices = 4;
    optional bool stale = 5;
    repeated QtProto.QVector3D leadPositions = 6;
}

message NoteStation {
    required QtProto.QString name = 1;
    optional QtProto.QPointF positionOnNote = 2;
}

message NoteTranformation {
    optional double northUp = 1;
    optional Length scaleNumerator = 2;
    optional Length scaleDenominator = 3;
}

message Length {
    required double value = 1;
    optional Units.LengthUnit unit = 2;
}

message ImageResolution {
    required double value = 1;
    optional Units.ImageResolutionUnit unit = 2;
}

message Team {
    repeated TeamMember teamMembers = 1;
}

message TeamMember {
    optional QtProto.QString name = 1;
    optional QtProto.QStringList jobs = 2;
}

message Units {
    enum LengthUnit {
        Inches = 0;       //!< Inches
        Feet = 1;       //!< Feet
        Yards = 2;       //!< Yards
        Meters = 3;        //!< Meters
        Millimeters = 4;       //!< Millimeters
        Centimeters = 5;       //!< Centimeters
        Kilometers = 6;       //!< Kilometers
        LengthUnitless = 7;  //!< Invalid units or unit less
        Miles = 8;
    }

    enum ImageResolutionUnit {
        DotsPerInch = 0;
        DotsPerCentimeter = 1;
        DotsPerMeter = 2;
    }
}

message StationPositionLookup {
    repeated NamePosition stationPositions = 1;

    message NamePosition {
        required QtProto.QString stationName = 1;
        required QtProto.QVector3D position = 2;
    }
}

message Lead {
    optional QtProto.QPointF positionOnNote = 1;
    optional QtProto.QString description = 2;
    optional QtProto.QSizeF size = 3;
    optional bool completed = 4;
}
