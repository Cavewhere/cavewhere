syntax = "proto3";
import "qt.proto";

package CavewhereProto;

message FileVersion {
    optional int32 version = 1; //Protobuf file version
    optional string cavewhereVersion = 2;
}

//This is a legacy message, do not use
message CavingRegion {
    repeated Cave caves = 1;
    optional int32 version = 2;
    optional QtProto.QString legacy_cavewhereVersion = 3;
    optional string cavewhereVersion = 4;
}

message Cave {
    optional string name = 8;
    repeated Trip trips = 2;

    //This probably should be in a settings file (global / local) somewhere
    optional Units.LengthUnit lengthUnit = 3;
    optional Units.LengthUnit depthUnit = 4;

    //These should be put into a local cache
    optional StationPositionLookup stationPositionLookup = 5;
    optional bool stationPositionLookupStale = 6;
    optional SurveyNetwork network = 7;

    //Depercated types, don't use
    optional QtProto.QString legacy_name = 1 [deprecated = true];
}

message Trip {
    optional string name = 7;
    optional QtProto.QDate date = 2;
    optional SurveyNoteModel noteModel = 3 [deprecated = true]; //Notes are loaded independantly from files
    optional TripCalibration tripCalibration = 4;
    repeated SurveyChunk chunks = 5;
    optional Team team = 6;

    //Depercated types, don't use
    optional QtProto.QString legacy_name = 1 [deprecated = true];
}

//This is a legacy message, do not use, use StationShot instead
message Station {
    optional string name = 14;

    //---- Version = 6 attributes
    optional DistanceReading legacy_leftReading = 10;
    optional DistanceReading legacy_rightReading = 11;
    optional DistanceReading legacy_upReading = 12;
    optional DistanceReading legacy_downReading = 13;

    //Depercated types, don't use
    optional QtProto.QString legacy_name = 1 [deprecated = true];

    //---- Version <= 5 attributes
    optional double legacy_left = 2 [deprecated = true]; //This is deprecated use leftReading
    optional double legacy_right = 3 [deprecated = true]; //This is deprecated use rightReading
    optional double legacy_up = 4  [deprecated = true]; //This is deprecated use upReading
    optional double legacy_down = 5 [deprecated = true]; //This is deprecated use downReading
    optional DistanceStates.State legacy_leftState = 6  [deprecated = true]; //This is deprecated use leftReading
    optional DistanceStates.State legacy_rightState = 7  [deprecated = true]; //This is deprecated use rightReading
    optional DistanceStates.State legacy_upState = 8 [deprecated = true]; //This is deprecated use upReading
    optional DistanceStates.State legacy_downState = 9 [deprecated = true]; //This is deprecated use downReading
}

//This is a legacy message, do not use
message SurveyNoteModel {
    repeated Note notes = 1;
}

message Note {
    optional double rotation = 2;
    repeated Scrap scraps = 3;
    optional ImageResolution imageResolution = 4;
    optional string imagePath = 5; //Relative path to the note's image

    optional Image legacy_image = 1;
}

//This is a legacy message, do not use
message Image {
    optional int32 originalId = 1;
    optional int32 iconId = 2;
    repeated int32 mipmapIds = 3;
    optional QtProto.QSize size = 4;
    optional int32 dotPerMeter = 5;
    optional QtProto.QSizeF OBSOLETE_clipArea = 6; //Not need anymore
}

message TripCalibration {
    optional bool correctedCompassBacksight = 1;
    optional bool correctedClinoBacksight = 2;
    optional double tapeCalibration = 3;
    optional double frontCompassCalibration = 4;
    optional double frontClinoCalibration = 5;
    optional double backCompasssCalibration = 6;
    optional double backClinoCalibration= 7;
    optional double declination = 8;
    optional Units.LengthUnit distanceUnit = 9;
    optional bool frontSights = 10;
    optional bool backSights = 11;
    optional bool correctedCompassFrontsight = 12;
    optional bool correctedClinoFrontsight = 13;
}

message ChunkCalibration {
    optional int32 shotIndex = 1;
    optional TripCalibration calibration = 2;
}

message SurveyChunk {
    repeated Station stations = 1;
    repeated Shot shots = 2;
    repeated ChunkCalibration calibrations = 3;
    repeated StationShot leg = 4;
    optional string id = 5; //UUID
}

//This is a legacy message, do not use, use StationShot instead
message Shot {
    //---- Version <= 5 attributes
    optional double legacy_Distance = 1 [deprecated = true];
    optional double legacy_Compass = 2 [deprecated = true];
    optional double legacy_BackCompass = 3 [deprecated = true];
    optional double legacy_Clino = 4 [deprecated = true];
    optional double legacy_BackClino = 5 [deprecated = true];
    optional DistanceStates.State legacy_distanceState = 6[deprecated = true];
    optional CompassStates.State legacy_compassState = 7 [deprecated = true];
    optional CompassStates.State legacy_backCompassState = 8 [deprecated = true];
    optional ClinoStates.State legacy_clinoState = 9 [deprecated = true];
    optional ClinoStates.State legacy_backClinoState = 10 [deprecated = true];

    //All versions
    optional bool includeDistance = 11;

    //--- Version = 6 attributes
    optional DistanceReading legacy_distanceReading = 12;
    optional CompassReading legacy_compassReading = 13;
    optional CompassReading legacy_backCompassReading = 14;
    optional ClinoReading legacy_clinoReading = 15;
    optional ClinoReading legacy_backClinoReading = 16;
}

//This merges stations and shots together, so it's easier to read in JSON
//This allows for interleaving stations and shots, this a union of cwStation and cwShot
//Proto array of stationshot is interleaved Station -> shot -> station -> shot -> station.
message StationShot {
    //optional Station station = 1;
    //optional Shot shot = 2;

    //Shared data
    optional string id = 1;

    //Station data
    optional string name = 100;
    optional string left = 101;
    optional string right = 102;
    optional string up = 103;
    optional string down = 104;

    //Shot data
    optional bool includeDistance = 1000;
    optional string distance = 1001;
    optional string compass = 1002;
    optional string backCompass = 1003;
    optional string clino = 1004;
    optional string backClino = 1005;
}

//This is a legacy message from < V5
message DistanceStates {
    enum State {
        Valid = 0;
        Empty = 1;
    }
}

//This is a legacy message from < V5
message CompassStates {
    enum State {
        Valid = 0;
        Empty = 1;
    }
}

//This is a legacy message from < V5
message ClinoStates {
    enum State {
        Valid = 0;
        Empty = 1;
        Down = 2;
        Up = 3;
    }
}

message Scrap {
    enum ScrapType {
        Plan = 0;
        RunningProfile = 1;
        ProjectedProfile = 2;
    }

    repeated QtProto.QPointF outlinePoints = 1;
    repeated NoteStation noteStations = 2;
    optional NoteTranformation noteTransformation = 3;
    optional bool calculateNoteTransform = 4;
    repeated Lead leads = 6;
    optional ScrapType type = 7;
    optional ProjectedProfileScrapViewMatrix profileViewMatrix = 8; //Only used if type == ProjectedProfile

    //Should be cached
    optional TriangulatedData triangleData = 5;
}

//This is used for data cacheing
message TriangulatedData {
    optional Image croppedImage = 1;
    repeated QtProto.QVector3D points = 2;
    repeated QtProto.QVector2D texCoords = 3;
    repeated uint32 indices = 4;
    optional bool stale = 5;
    repeated QtProto.QVector3D leadPositions = 6;
}

message NoteStation {
    optional string name = 3;
    optional QtProto.QPointF positionOnNote = 2;

    //Deprecated types, don't use
    optional QtProto.QString legacy_name = 1 [deprecated = true];
}

message NoteTranformation {
    optional double northUp = 1;
    optional Length scaleNumerator = 2;
    optional Length scaleDenominator = 3;
}

message Length {
    optional double value = 1;
    optional Units.LengthUnit unit = 2;
}

message ImageResolution {
    optional double value = 1;
    optional Units.ImageResolutionUnit unit = 2;
}

message Team {
    repeated TeamMember teamMembers = 1;
}

message TeamMember {
    optional string id = 4;
    optional string name = 3;    
    repeated string jobs = 5;

    optional QtProto.QStringList legacy_jobs = 2;
    optional QtProto.QString legacy_name = 1;
}

message Units {
    enum LengthUnit {
        Inches = 0;       //!< Inches
        Feet = 1;       //!< Feet
        Yards = 2;       //!< Yards
        Meters = 3;        //!< Meters
        Millimeters = 4;       //!< Millimeters
        Centimeters = 5;       //!< Centimeters
        Kilometers = 6;       //!< Kilometers
        LengthUnitless = 7;  //!< Invalid units or unit less
        Miles = 8;
    }

    enum ImageResolutionUnit {
        DotsPerInch = 0;
        DotsPerCentimeter = 1;
        DotsPerMeter = 2;
    }
}

message StationPositionLookup {
    repeated NamePosition stationPositions = 1;

    message NamePosition {
        optional string stationName = 3;
        optional QtProto.QVector3D position = 2;

        optional QtProto.QString legacy_stationName = 1;
    }
}

message Lead {
    optional QtProto.QPointF positionOnNote = 1;
    optional string description = 5;
    optional QtProto.QSizeF size = 3;
    optional bool completed = 4;

    optional QtProto.QString legacy_description = 2;
}

//This should be cached
message SurveyNetwork {
    repeated StationLookupItem stations = 1;

    message StationLookupItem {
        optional string stationName = 3;
        repeated string neighbors = 4;

        optional QtProto.QStringList legacy_neighbors = 2;
        optional QtProto.QString legacy_stationName = 1;
    }
}

message ProjectedProfileScrapViewMatrix {

    enum Direction {
        LookingAt = 0;
        LeftToRight = 1;
        RightToLeft = 2;
    }

    optional double azimuth = 1;
    optional Direction direction = 2;
}

//This is a legacy message, don't use
message DistanceReading {
    optional QtProto.QString legacy_value = 1;
}

//This is a legacy message, don't use
message CompassReading {
    optional QtProto.QString legacy_value = 1;
}
//This is a legacy message, don't use
message ClinoReading {
    optional QtProto.QString legacy_value = 1;
}
