import qbs 1.0
import qbs.TextFile

Project {
    name: "installer"

    readonly property string installDir: "../../build-cavewhere-" +
                                         profile.replace("qtc_", "") + "-" + qbs.buildVariant + "/" +
                                         profile + "-" + qbs.buildVariant + "/" +
                                         "install-root"

    qbsSearchPaths: ["../qbsModules"]

    Product {
        name: "cavewhere-install"
        type: "deployedApplication"


        property var qt: qtApp.Qt.core.binPath

        Group {
            name: "Cavewhere Executable"
            fileTags: ["qtApplication"]
            files: [
                project.installDir + "/Cavewhere.exe"
            ]
        }

        Rule {
            inputs: ["qtApplication"]

            Artifact {
                filePath: ["sauce"]
                fileTags: ["deployedApplication"]
            }

            prepare: {
                var cmd = new Command(product.qt + "/windeployqt.exe")
                cmd.workDirectory = product.installDir
                cmd.arguments = ["--qmldir",
                                 product.sourceDirectory + "/" + project.installDir + "/qml",
                                 input.filePath]
                cmd.description = "running windeployqt.exe"
                return cmd
            }
        }
    }

    Product {
        name: "installer"
        type: "innoInstaller"

        readonly property string version: Git.productVersion

        Depends { name: "cavewhere-install" }
        Depends { name: "Git" }

        Group {
            name: "innoFiles"
            fileTags: "innoOriginal"
            files: [
                "windows/cavewhere.iss"
            ]
        }

        Rule {
            inputs: ["innoOriginal"]
            usings: ["deployedApplication"]
            multiplex: true

            Artifact {
                filePath: "cavewhere-withDefines.iss"
                fileTags: "inno"
            }

            prepare: {
                var cmd = new JavaScriptCommand()
                cmd.description = "Generating inno file " + output.filePath + " from " + inputs.innoOriginal[0].filePath
                cmd.sourceCode = function() {
                    var inputHandle = TextFile(inputs.innoOriginal[0].filePath, TextFile.ReadOnly);
                    var innoInputFile = inputHandle.readAll();
                    inputHandle.close()

                    innoInputFile = '; NOTE: This file was automatically generated by the build process, don\'t edit it\n\n\
#define MyAppName "Cavewhere"\n\
#define MyAppVersion "' + product.version + '"\n\
#define MyAppPublisher "Cavewhere"\n\
#define MyAppURL "http://www.cavewhere.com"\n\
#define MyAppExeName "Cavewhere.exe"\n\
#define releaseDirectory "' + product.sourceDirectory + "/" + project.installDir + '"\n\n' +
innoInputFile

                    var outputHandle = TextFile(output.filePath, TextFile.WriteOnly)
                    outputHandle.write(innoInputFile)
                    outputHandle.close()
                }
                return cmd
            }
        }

        Rule {
            inputs: ["inno"]

            Artifact {
                filePath: "Cavewhere " + product.version + " 32bit.exe"
                fileTags: "innoInstaller"
            }

            prepare: {
                var cmd = new Command("C:/Program Files/Inno Setup 5/ISCC.exe")
                cmd.arguments = [input.filePath]
                cmd.description = "running ISCC.exe"
                return cmd
            }
        }


    }

    CppApplication {
        id: qtApp
        name: "QtApp"
        Depends { name: "Qt"; submodules: ["core"] }
    }

}
